diff --git a/Makefile b/Makefile
index 09d790c..39ba777 100644
--- a/Makefile
+++ b/Makefile
@@ -51,7 +51,7 @@ TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/d
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+# QEMU = qemu-system-x86_64
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +181,8 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_test\
+	_ps\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +219,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -249,7 +251,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c test.c ps.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
diff --git a/defs.h b/defs.h
index 82fb982..b6034dd 100644
--- a/defs.h
+++ b/defs.h
@@ -9,6 +9,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -107,6 +108,8 @@ int             cpuid(void);
 void            exit(void);
 int             fork(void);
 int             growproc(int);
+int             settickets(int);
+int             getpinfo(struct pstat*);
 int             kill(int);
 struct cpu*     mycpu(void);
 struct proc*    myproc();
@@ -120,6 +123,9 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+void            sgenrand(unsigned long);
+long            genrand();
+long            random_at_most(long);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/proc.c b/proc.c
index 806b1b1..04b302a 100644
--- a/proc.c
+++ b/proc.c
@@ -6,11 +6,27 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
-
-struct {
+#include "pstat.h"
+#define PHI 0x9e3779b9
+#define N 624
+#define M 397
+#define MATRIX_A 0x9908b0df   /* constant vector a */
+#define UPPER_MASK 0x80000000 /* most significant w-r bits */
+#define LOWER_MASK 0x7fffffff /* least significant r bits */
+
+/* Tempering parameters */   
+#define TEMPERING_MASK_B 0x9d2c5680
+#define TEMPERING_MASK_C 0xefc60000
+#define TEMPERING_SHIFT_U(y)  (y >> 11)
+#define TEMPERING_SHIFT_S(y)  (y << 7)
+#define TEMPERING_SHIFT_T(y)  (y << 15)
+#define TEMPERING_SHIFT_L(y)  (y >> 18)
+
+#define RAND_MAX 0x7fffffff
+struct{
   struct spinlock lock;
   struct proc proc[NPROC];
-} ptable;
+}ptable;
 
 static struct proc *initproc;
 
@@ -26,6 +42,80 @@ pinit(void)
   initlock(&ptable.lock, "ptable");
 }
 
+static unsigned long mt[N]; /* the array for the state vector  */
+static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
+
+/* initializing the array with a NONZERO seed */
+void
+sgenrand(unsigned long seed)
+{
+    /* setting initial seeds to mt[N] using         */
+    /* the generator Line 25 of Table 1 in          */
+    /* [KNUTH 1981, The Art of Computer Programming */
+    /*    Vol. 2 (2nd Ed.), pp102]                  */
+    mt[0]= seed & 0xffffffff;
+    for (mti=1; mti<N; mti++)
+        mt[mti] = (69069 * mt[mti-1]) & 0xffffffff;
+}
+
+long /* for integer generation */
+genrand()
+{
+    unsigned long y;
+    static unsigned long mag01[2]={0x0, MATRIX_A};
+    /* mag01[x] = x * MATRIX_A  for x=0,1 */
+
+    if (mti >= N) { /* generate N words at one time */
+        int kk;
+
+        if (mti == N+1)   /* if sgenrand() has not been called, */
+            sgenrand(4357); /* a default initial seed is used   */
+
+        for (kk=0;kk<N-M;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        for (;kk<N-1;kk++) {
+            y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
+            mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
+        }
+        y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
+        mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
+
+        mti = 0;
+    }
+  
+    y = mt[mti++];
+    y ^= TEMPERING_SHIFT_U(y);
+    y ^= TEMPERING_SHIFT_S(y) & TEMPERING_MASK_B;
+    y ^= TEMPERING_SHIFT_T(y) & TEMPERING_MASK_C;
+    y ^= TEMPERING_SHIFT_L(y);
+
+    // Strip off uppermost bit because we want a long,
+    // not an unsigned long
+    return y & RAND_MAX;
+}
+
+// Assumes 0 <= max <= RAND_MAX
+// Returns in the half-open interval [0, max]
+long random_at_most(long max) {
+  unsigned long
+    // max <= RAND_MAX < ULONG_MAX, so this is okay.
+    num_bins = (unsigned long) max + 1,
+    num_rand = (unsigned long) RAND_MAX + 1,
+    bin_size = num_rand / num_bins,
+    defect   = num_rand % num_bins;
+
+  long x;
+  do {
+   x = genrand();
+  }
+  // This is carefully written not to overflow
+  while (num_rand - defect <= (unsigned long)x);
+
+  // Truncated division is intentional
+  return x/bin_size;
+}
 // Must be called with interrupts disabled
 int
 cpuid() {
@@ -88,6 +178,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets=1;
 
   release(&ptable.lock);
 
@@ -174,6 +265,37 @@ growproc(int n)
   return 0;
 }
 
+int
+settickets(int n)
+{
+  //acquire(&ptable.lock);
+  myproc()->tickets=n;
+  //release(&ptable.lock);
+  return 0;
+}
+
+int
+getpinfo(struct pstat* pst)
+{
+  struct proc *p;
+  acquire(&ptable.lock);
+  int idx=0;
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    //c++;
+      pst->pid[idx]=p->pid;
+      pst->tickets[idx]=p->tickets;
+      pst->ticks[idx]=p->ticks;
+      if(p->state!=UNUSED) {
+      pst->inuse[idx]=1;
+      }
+      else pst->inuse[idx]=0;
+      idx++;
+  }
+  //pst->num_processes=c;
+  release(&ptable.lock);
+  return 0;
+}
+
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
@@ -198,6 +320,9 @@ fork(void)
   }
   np->sz = curproc->sz;
   np->parent = curproc;
+  //cprintf("curr-%d\n",curproc->tickets);
+  np->tickets=curproc->tickets;
+  //cprintf("child-%d\n",np->tickets);
   *np->tf = *curproc->tf;
 
   // Clear %eax so that fork returns 0 in the child.
@@ -329,26 +454,47 @@ scheduler(void)
   for(;;){
     // Enable interrupts on this processor.
     sti();
-
+    int totalTickets = 0;
+    int accumulated_tickets=0;
+    acquire(&ptable.lock);
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->state != RUNNABLE)
+        continue;
+      totalTickets = totalTickets + p->tickets;  
+    }
+    release(&ptable.lock);
+    //cprintf("%d\n",totalTickets);
+    if(totalTickets==0) continue;
+    //int winner_ticket=rand()%(totalTickets+1);
+    //cprintf("%d\n",winner_ticket);
+    int winner_ticket=random_at_most(totalTickets);
+    
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
-
+      accumulated_tickets=accumulated_tickets+p->tickets;
+      if(accumulated_tickets<winner_ticket) continue;
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
-
+      acquire(&tickslock);
+      const int ticks_tart = ticks;
+      release(&tickslock);
       swtch(&(c->scheduler), p->context);
+      acquire(&tickslock);
+      p->ticks = p->ticks +(ticks-ticks_tart);
+      release(&tickslock);
       switchkvm();
 
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      break;
     }
     release(&ptable.lock);
 
diff --git a/proc.h b/proc.h
index 1647114..3f38ad4 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;
+  int inuse;
+  int ticks;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/ps.c b/ps.c
new file mode 100644
index 0000000..1fe1064
--- /dev/null
+++ b/ps.c
@@ -0,0 +1,23 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "pstat.h"
+
+int main()
+{
+struct pstat psta={0};
+//psta=malloc( sizeof( struct pstat ));
+printf( 1 , "%d \n", settickets(10));
+int flag=getpinfo(&psta);
+if(flag==-1) printf(1,"Structure allocation failed\n");
+else {
+    printf(1,"PID\tTICKS\tTICKETS\tINUSE\n");
+    int index;
+    for(index=0;index<NPROC;index++) {
+        if(psta.inuse[index]==1) {
+            printf(1,"%d\t%d\t%d\t%d\n",psta.pid[index],psta.ticks[index],psta.tickets[index],psta.inuse[index]);
+        }
+    }
+}
+exit(); 
+}
\ No newline at end of file
diff --git a/pstat.h b/pstat.h
new file mode 100644
index 0000000..f5cd4d9
--- /dev/null
+++ b/pstat.h
@@ -0,0 +1,23 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+
+#include "param.h"
+
+
+struct pstat {
+
+  int inuse[NPROC];   // whether this slot of the process table is in use (1 or 0)
+
+  int tickets[NPROC]; // the number of tickets this process has
+
+  int pid[NPROC];     // the PID of each process
+
+  int ticks[NPROC];   // the number of ticks each process has accumulated
+  //int num_processes;
+
+};
+
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..371e113 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,9 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_settickets(void);
+extern int sys_getpinfo(void);
+extern int sys_yield(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +129,9 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]   sys_settickets,
+[SYS_getpinfo]   sys_getpinfo,
+[SYS_yield]   sys_yield,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..becc6e2 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
+#define SYS_yield 24
\ No newline at end of file
diff --git a/sysproc.c b/sysproc.c
index 0686d29..afc14cc 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,9 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "pstat.h"
+#include <stddef.h>
+//extern struct p_table ptable;
 
 int
 sys_fork(void)
@@ -42,6 +45,32 @@ sys_getpid(void)
   return myproc()->pid;
 }
 
+void
+sys_yield(void)
+{
+  yield();
+  //return 0;
+}
+
+int
+sys_settickets(int number)
+{
+  argint(0,&number);
+  if(number<1) return -1;
+  //cprintf("setting tickets of current proc to %d\n",number);
+  return settickets(number);
+}
+
+int
+sys_getpinfo(struct pstat* sp)
+{
+  struct pstat* new_struct;
+  argptr(0,(void*)&new_struct,sizeof(*new_struct));
+  if(new_struct == NULL) return -1;
+  else return getpinfo(new_struct);
+  //return myproc()->pid;
+}
+
 int
 sys_sbrk(void)
 {
diff --git a/test.c b/test.c
new file mode 100644
index 0000000..78d6ff2
--- /dev/null
+++ b/test.c
@@ -0,0 +1,237 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "pstat.h"
+
+void spin() {
+    unsigned y = 0;
+    //int pid = getpid();
+
+    while (1) {
+        y = 0;
+        while (y < (10000)) {
+            y++;
+        }
+    }
+}
+
+void printpinfo(int pid)
+{
+    struct pstat pinfo = {0};
+	getpinfo(&pinfo);
+	int i;
+    
+    for (i = 0; i < NPROC; i++) {
+        if(pinfo.pid[i] == pid) {
+		    printf(1,
+                    "%d\t%d\t%d\t%d\n", 
+                    pinfo.pid[i],
+                    pinfo.ticks[i],
+                    pinfo.tickets[i],
+                    pinfo.inuse[i]
+                    );
+        }
+    }
+}
+
+int ps(){
+	// Get process info first
+	struct pstat pinfo = {0};
+    
+    
+    //while(1){
+        //sleep(500);
+        if(-1 == getpinfo(&pinfo)){
+		    printf(1, "\n\t FAILURE\n");return 0;
+	    }
+       
+        printf(1,"PID\tTicks\tTickets\tInUse\n");
+
+        for(int i=0;i<NPROC;i++){
+            if(pinfo.pid[i]==0)continue;
+            printf(1,
+                    "%d\t%d\t%d\t%d\n", 
+                    pinfo.pid[i],
+                    pinfo.ticks[i],
+                    pinfo.tickets[i],
+                    pinfo.inuse[i]
+                    );
+        }
+     
+   // }
+	return 1;
+}
+
+int main(int argc, char *argv[])
+{
+	 int pid1, pid2, pid3;
+      
+    if ((pid1 = fork()) == 0) {
+        //int pp1 = getpid();
+	    //printf(0, "Process started with PID %d\n\n", pp1);
+        settickets(10);
+        spin();
+	    //printpinfo(pp1);
+        //printf(0, "Process with PID %d finished!\n\n", pp1);
+        //exit(); 
+    }
+    else if ((pid2 = fork()) == 0) {
+        //int pp2 = getpid();
+	    //printf(0, "Process started with PID %d\n\n", pp2);
+        settickets(20);
+        spin();
+	    //printpinfo(pp2);
+        //printf(0, "Process with PID %d finished!\n\n", pp2);
+        //exit();
+    }
+    else if ((pid3 = fork()) == 0) {
+        //int pp3 = getpid();
+	    //printf(0, "Process started with PID %d\n\n", pp3);
+        settickets(30);
+        spin();
+	    //printpinfo(pp3);
+        //printf(0, "Process with PID %d finished!\n\n", pp3);
+        //exit();
+    }
+    while(1){
+        printf(1,"PID\tTicks\tTickets\tInUse\n");
+        printpinfo(pid1);
+        printpinfo(pid2);
+        printpinfo(pid3);
+        sleep(500);
+    }
+    wait();
+    wait();
+    wait();
+    exit();
+}
+// #include "types.h"
+// #include "user.h"
+// #include "pstat.h"
+
+// #undef USE_YIELD
+// #define MAX_CHILDREN 32
+// #define LARGE_TICKET_COUNT 100000
+// #define MAX_YIELDS_FOR_SETUP 100
+
+// __attribute__((noreturn))
+// void yield_forever() {
+//     while (1) {
+//         yield();
+//     }
+// }
+
+// __attribute__((noreturn))
+// void run_forever() {
+//     while (1) {
+//         __asm__("");
+//     }
+// }
+
+// int spawn(int tickets) {
+//     int pid = fork();
+//     if (pid == 0) {
+//         settickets(tickets);
+//         yield();
+// #ifdef USE_YIELD
+//         yield_forever();
+// #else
+//         run_forever();
+// #endif
+//     } else if (pid != -1) {
+//         return pid;
+//     } else {
+//         printf(2, "error in fork\n");
+//         return -1;
+//     }
+// }
+
+// int find_index_of_pid(int *list, int list_size, int pid) {
+//     for (int i = 0; i < list_size; ++i) {
+//         if (list[i] == pid)
+//             return i;
+//     }
+//     return -1;
+// }
+
+// void wait_for_ticket_counts(int num_children, int *pids, int *tickets) {
+//     for (int yield_count = 0; yield_count < MAX_YIELDS_FOR_SETUP; ++yield_count) {
+//         yield();
+//         int done = 1;
+//         struct pstat info;
+//         getpinfo(&info);
+//         for (int i = 0; i < num_children; ++i) {
+//             int index = find_index_of_pid(info.pid, info.num_processes, pids[i]);
+//             if (info.tickets[index] != tickets[i]) done = 0;
+//         }
+//         if (done)
+//             break;
+//     }
+// }
+
+// int main(int argc, char *argv[])
+// {
+//     if (argc < 3) {
+//         printf(2, "usage: %s seconds tickets1 tickets2 ... ticketsN\n"
+//                   "       seconds is the number of time units to run for\n"
+//                   "       ticketsX is the number of tickets to give to subprocess N\n",
+//                   argv[0]);
+//         exit();
+//     }
+//     int tickets_for[MAX_CHILDREN];
+//     int active_pids[MAX_CHILDREN];
+//     int num_seconds = atoi(argv[1]);
+//     int num_children = argc - 2;
+//     if (num_children > MAX_CHILDREN) {
+//         printf(2, "only up to %d supported\n", MAX_CHILDREN);
+//         exit();
+//     }
+//     /* give us a lot of ticket so we don't get starved */
+//     settickets(LARGE_TICKET_COUNT);
+//     for (int i = 0; i < num_children; ++i) {
+//         int tickets = atoi(argv[i + 2]);
+//         tickets_for[i] = tickets;
+//         active_pids[i] = spawn(tickets);
+//     }
+//     wait_for_ticket_counts(num_children, active_pids, tickets_for);
+//     struct pstat before, after;
+//     before.num_processes = after.num_processes = -1;
+//     getpinfo(&before);
+//     sleep(num_seconds);
+//     getpinfo(&after);
+//     for (int i = 0; i < num_children; ++i) {
+//         kill(active_pids[i]);
+//     }
+//     for (int i = 0; i < num_children; ++i) {
+//         wait();
+//     }
+//     if (before.num_processes >= NPROC || after.num_processes >= NPROC) {
+//         printf(2, "getpinfo's num_processes is greater than NPROC before parent slept\n");
+//         return 1;
+//     }
+//     if (before.num_processes < 0 || after.num_processes < 0) {
+//         printf(2, "getpinfo's num_processes is negative -- not changed by syscall?\n");
+//         return 1;
+//     }
+//     printf(1, "TICKETS\tTICKS\n");
+//     for (int i = 0; i < num_children; ++i) {
+//         int before_index = find_index_of_pid(before.pid, before.num_processes, active_pids[i]);
+//         int after_index = find_index_of_pid(after.pid, after.num_processes, active_pids[i]);
+//         if (before_index == -1)
+//             printf(2, "child %d did not exist for getpinfo before parent slept\n", i);
+//         if (after_index == -1)
+//             printf(2, "child %d did not exist for getpinfo after parent slept\n", i);
+//         if (before_index == -1 || after_index == -1) {
+//             printf(1, "%d\t--unknown--\n", tickets_for[i]);
+//         } else {
+//             if (before.tickets[before_index] != tickets_for[i]) {
+//                 printf(2, "child %d had wrong number of tickets in getpinfo before parent slept\n", i);
+//             }
+//             if (after.tickets[after_index] != tickets_for[i]) {
+//                 printf(2, "child %d had wrong number of tickets in getpinfo after parent slept\n", i);
+//             }
+//             printf(1, "%d\t%d\n", tickets_for[i], after.ticks[after_index] - before.ticks[before_index]);
+//         }
+//     }
+//     exit();
+// }
\ No newline at end of file
diff --git a/user.h b/user.h
index 4f99c52..4e4a120 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -23,6 +24,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
+void yield(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -36,4 +40,4 @@ uint strlen(const char*);
 void* memset(void*, int, uint);
 void* malloc(uint);
 void free(void*);
-int atoi(const char*);
+int atoi(const char*);
\ No newline at end of file
diff --git a/usys.S b/usys.S
index 8bfd8a1..6000d9a 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,7 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(settickets)
+SYSCALL(getpinfo)
+SYSCALL(yield)
+
